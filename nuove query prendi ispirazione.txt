https://aws.amazon.com/it/blogs/database/managing-postgresql-users-and-roles/


È possibile utilizzare la seguente query per ottenere un elenco di tutti gli utenti e i ruoli del database insieme a un elenco dei ruoli loro assegnati:

SELECT 
      r.rolname, 
      ARRAY(SELECT b.rolname
            FROM pg_catalog.pg_auth_members m
            JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid)
            WHERE m.member = r.oid) as memberof
FROM pg_catalog.pg_roles r
WHERE r.rolname NOT IN ('pg_signal_backend','rds_iam',
                        'rds_replication','rds_superuser',
                        'rdsadmin','rdsrepladmin')
ORDER BY 1;



******************************************************************************************************************************

Riepilogo
In questo post ho condiviso alcune best practice per la gestione di utenti e ruoli in PostgreSQL. Questo post fornisce un framework di base che è possibile modificare in base ai requisiti dell'applicazione e ai principi del privilegio minimo.

Per riassumere i concetti, ho fornito le seguenti istruzioni SQL di riferimento per l'implementazione di utenti e ruoli utilizzando uno scenario di esempio:

È stato creato un database PostgreSQL con il database primario denominato mydatabase.
È stato creato un nuovo schema denominato myschemacon più tabelle.
È necessario creare due utenti di report con le autorizzazioni per leggere tutte le tabelle nello schema myschema.
È necessario creare due utenti dell'app con le autorizzazioni per leggere e scrivere su tutte le tabelle nello schema myschemae anche per creare nuove tabelle.
Gli utenti dovrebbero ottenere automaticamente le autorizzazioni su tutte le nuove tabelle che verranno aggiunte in futuro.
Per implementare questo scenario, devi connetterti al database mydatabase utilizzando l'utente master, quindi eseguire le seguenti istruzioni SQL utilizzando uno qualsiasi dei client PostgreSQL come psql o pgAdmin:

-- Revoke privileges from 'public' role
REVOKE CREATE ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON DATABASE mydatabase FROM PUBLIC;

-- Read-only role
CREATE ROLE readonly;
GRANT CONNECT ON DATABASE mydatabase TO readonly;
GRANT USAGE ON SCHEMA myschema TO readonly;
GRANT SELECT ON ALL TABLES IN SCHEMA myschema TO readonly;
ALTER DEFAULT PRIVILEGES IN SCHEMA myschema GRANT SELECT ON TABLES TO readonly;

-- Read/write role
CREATE ROLE readwrite;
GRANT CONNECT ON DATABASE mydatabase TO readwrite;
GRANT USAGE, CREATE ON SCHEMA myschema TO readwrite;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA myschema TO readwrite;
ALTER DEFAULT PRIVILEGES IN SCHEMA myschema GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO readwrite;
GRANT USAGE ON ALL SEQUENCES IN SCHEMA myschema TO readwrite;
ALTER DEFAULT PRIVILEGES IN SCHEMA myschema GRANT USAGE ON SEQUENCES TO readwrite;

-- Users creation
CREATE USER reporting_user1 WITH PASSWORD 'some_secret_passwd';
CREATE USER reporting_user2 WITH PASSWORD 'some_secret_passwd';
CREATE USER app_user1 WITH PASSWORD 'some_secret_passwd';
CREATE USER app_user2 WITH PASSWORD 'some_secret_passwd';

-- Grant privileges to users
GRANT readonly TO reporting_user1;
GRANT readonly TO reporting_user2;
GRANT readwrite TO app_user1;
GRANT readwrite TO app_user2;


***********************************

create function check_zone(p_input text)
  returns boolean
as
$$
declare
  l_allowed text[] := array['Marine', 'Terrestrial'];
begin
  if p_input = any(l_allowed) then 
    return true;
  end if;
  raise 'The only allowed values are: %', array_to_string(l_allowed, ', ');
end;
$$
language plpgsql
immutable;